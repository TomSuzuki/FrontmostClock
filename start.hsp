// マクロ定義
#define global ctype hexRGB(%1,%2,%3) (%1 | %2 << 8 | %3 << 16)
#define global ctype decRGB(%1) %1>>16 & 0xFF,%1>>8 & 0xFF,%1 & 0xFF

// 画面関連用
#uselib "user32.dll" 
	#cfunc CreatePopupMenu "CreatePopupMenu"
	#func InsertMenu "InsertMenuA" int,int,int,int,sptr
	#func TrackPopupMenu "TrackPopupMenu" int,int,int,int,int,int,int
	#func DestroyMenu "DestroyMenu" int
	#func SetForegroundWindow "SetForegroundWindow" int
	#func PostMessage "PostMessageA" int,int,int,int
	#func SetTimer "SetTimer" int,int,int,sptr
	#func KillTimer "KillTimer" int,int

// ライブラリ読み込み
#include "hsp/lib.hsp"
#include "hsp/config.hsp"

// バージョン情報
#define global _title "最前面時計 version 1.20"

// 画面サイズ（ここは変更しない）
#define global clock_x	960
#define global clock_y	256

// WINAPI用の定義
#define global WM_SIZE			0x0005
#define global WM_RBUTTONDOWN	0x0204
#define global WM_COMMAND		0x0111

// メニューの定義
#enum global Menu_Line = -1
#enum global Menu_Exit
#enum global Menu_Version
#enum global Menu_Config
#enum global Menu_Reload

// ファイル定義
#define global File_Config "config.txt"

	// コンフィグから読み込み
	gosub *label_load

	// 調整
	if(color1==0):color1 = 1
	if(color2==0):color2 = 1

	// 設定
	weekday = "日","月","火","水","木","金","土"
	padding = 4

	// ウィンドウ定義
	buffer 1,clock_x,clock_y
	ovbgscr 0,int(window_rate*clock_x),int(window_rate*clock_y)
	title "最前面時計"
	gsel 0,2

	// 割り込み定義
	onclick gosub *label_move
	oncmd gosub *label_windowCommand, WM_SIZE
	oncmd gosub *label_showMenu,WM_RBUTTONDOWN
	oncmd gosub *label_command,WM_COMMAND

	// メインループ
	repeat
		redraw 0

		// 時計の描画
		gosub *label_display

		redraw 1
		await 1000/30
	loop

// 初期化処理
*label_load

	// 読み込み
	notesel data
	noteload File_Config
	SetConfigData data
		color1 = int(LoadConfig("color1","$E5004F"))
		color2 = int(LoadConfig("color2","$FFFAFA"))
		font_family = LoadConfig("font","メイリオ")
		window_rate = double(LoadConfig("windowRate","1"))

	SaveConfig File_Config

	return

//メニュー処理
*label_command

	// メニューの処理
	switch wparam & 0xffff
	case Menu_Version
		dialog "(C) 2020 TomSuzuki. \n " + _title,0
		swbreak
	case Menu_Exit
		end
		swbreak
	case Menu_Config
		exec File_Config,16,"open"
		swbreak
	case Menu_Reload
		gosub *label_load
		width int(window_rate*clock_x),int(window_rate*clock_y)
		swbreak
	swend
	
	return

*label_showMenu
	
	gosub *label_menu
	
	return

//メニュー表示
*label_menu
	
	hPopupMenu=CreatePopupMenu()
	InsertMenu hPopupMenu,4,0x400,Menu_Config,"設定ファイルを開く(&C)"
	InsertMenu hPopupMenu,4,0x400,Menu_Reload,"設定をリロード(&R)"
	InsertMenu hPopupMenu,4,0x400,Menu_Version,"バージョン情報(&A)"
	InsertMenu hPopupMenu,4,0x0800,Menu_Line,""
	InsertMenu hPopupMenu,4,0x400,Menu_Exit,"終了(&Q)"
	TrackPopupMenu hPopupMenu,0x20,ginfo(0),ginfo(1),0,hwnd,0
	DestroyMenu hPopupMenu
	
	return

// 移動用（これが無いとマウスで画面を移動できない）
*label_move
	
	cursel = ginfo_sel
	gsel ginfo_act
	sendmsg hwnd ,$a1,2,z
	gsel cursel
	
	return

// 表示
*label_display

	// 画面切り替え
	gsel 1
	
	// 背景
	color decRGB(color1):boxf
	color decRGB(color2):boxf padding,padding,clock_x-padding-1,clock_y-padding-1

	// メインの時計
	color decRGB(color1)
	font font_family,164,1
	pos clock_x/2,95
	tmes strf("%02d:%02d:%02d",gettime(4),gettime(5),gettime(6))

	// 日付
	font font_family,48,1
	pos clock_x/2,clock_y-44
	tmes strf("%04d/%02d/%02d (%s)",gettime(0),gettime(1),gettime(3),weekday(gettime(2)))

	// バー
	boxf 32,170,clock_x-32,174
	
	// コピー
	gsel 0
	pos 0,0
	gzoom ginfo(12),ginfo(13),1,0,0,clock_x,clock_y,0

	return

// 割り込みコマンド
*label_windowCommand

	gosub *label_display

	return
	